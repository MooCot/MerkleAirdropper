/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  Airdropper,
  AirdropperInterface,
} from "../../contracts/Airdropper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    name: "setMerkleRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000c2338038062000c238339818101604052810190610034919061011b565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600181905550505061015b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b282610087565b9050919050565b6100c2816100a7565b81146100cd57600080fd5b50565b6000815190506100df816100b9565b92915050565b6000819050919050565b6100f8816100e5565b811461010357600080fd5b50565b600081519050610115816100ef565b92915050565b6000806040838503121561013257610131610082565b5b6000610140858286016100d0565b925050602061015185828601610106565b9150509250929050565b610ab8806200016b6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632eb4a7ab1461005c5780632f52ebb71461007a5780637cb6475914610096578063c884ef83146100b2578063fc0c546a146100e2575b600080fd5b610064610100565b604051610071919061049e565b60405180910390f35b610094600480360381019061008f919061055e565b610106565b005b6100b060048036038101906100ab91906105ea565b610388565b005b6100cc60048036038101906100c79190610675565b610392565b6040516100d991906106bd565b60405180910390f35b6100ea6103b2565b6040516100f79190610737565b60405180910390f35b60015481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018a906107af565b60405180910390fd5b600033846040516020016101a8929190610838565b60405160208183030381529060405280519060200120905061020e838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600154836103d6565b61024d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610244906108b0565b60405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016103009291906108ee565b6020604051808303816000875af115801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610943565b610382576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610379906109bc565b60405180910390fd5b50505050565b8060018190555050565b60026020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000826103e385846103ed565b1490509392505050565b60008082905060005b84518110156104385761042382868381518110610416576104156109dc565b5b6020026020010151610443565b9150808061043090610a3a565b9150506103f6565b508091505092915050565b600081831061045b57610456828461046e565b610466565b610465838361046e565b5b905092915050565b600082600052816020526040600020905092915050565b6000819050919050565b61049881610485565b82525050565b60006020820190506104b3600083018461048f565b92915050565b600080fd5b600080fd5b6000819050919050565b6104d6816104c3565b81146104e157600080fd5b50565b6000813590506104f3816104cd565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261051e5761051d6104f9565b5b8235905067ffffffffffffffff81111561053b5761053a6104fe565b5b60208301915083602082028301111561055757610556610503565b5b9250929050565b600080600060408486031215610577576105766104b9565b5b6000610585868287016104e4565b935050602084013567ffffffffffffffff8111156105a6576105a56104be565b5b6105b286828701610508565b92509250509250925092565b6105c781610485565b81146105d257600080fd5b50565b6000813590506105e4816105be565b92915050565b600060208284031215610600576105ff6104b9565b5b600061060e848285016105d5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061064282610617565b9050919050565b61065281610637565b811461065d57600080fd5b50565b60008135905061066f81610649565b92915050565b60006020828403121561068b5761068a6104b9565b5b600061069984828501610660565b91505092915050565b60008115159050919050565b6106b7816106a2565b82525050565b60006020820190506106d260008301846106ae565b92915050565b6000819050919050565b60006106fd6106f86106f384610617565b6106d8565b610617565b9050919050565b600061070f826106e2565b9050919050565b600061072182610704565b9050919050565b61073181610716565b82525050565b600060208201905061074c6000830184610728565b92915050565b600082825260208201905092915050565b7f41697264726f7020616c726561647920636c61696d65642e0000000000000000600082015250565b6000610799601883610752565b91506107a482610763565b602082019050919050565b600060208201905081810360008301526107c88161078c565b9050919050565b60008160601b9050919050565b60006107e7826107cf565b9050919050565b60006107f9826107dc565b9050919050565b61081161080c82610637565b6107ee565b82525050565b6000819050919050565b61083261082d826104c3565b610817565b82525050565b60006108448285610800565b6014820191506108548284610821565b6020820191508190509392505050565b7f496e76616c69642070726f6f662e000000000000000000000000000000000000600082015250565b600061089a600e83610752565b91506108a582610864565b602082019050919050565b600060208201905081810360008301526108c98161088d565b9050919050565b6108d981610637565b82525050565b6108e8816104c3565b82525050565b600060408201905061090360008301856108d0565b61091060208301846108df565b9392505050565b610920816106a2565b811461092b57600080fd5b50565b60008151905061093d81610917565b92915050565b600060208284031215610959576109586104b9565b5b60006109678482850161092e565b91505092915050565b7f546f6b656e207472616e73666572206661696c65642e00000000000000000000600082015250565b60006109a6601683610752565b91506109b182610970565b602082019050919050565b600060208201905081810360008301526109d581610999565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a45826104c3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a7757610a76610a0b565b5b60018201905091905056fea26469706673582212207675409a09deeb012f23902c73a99dbb0e04060705f1e432524bda3abec90cff64736f6c63430008140033";

type AirdropperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AirdropperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Airdropper__factory extends ContractFactory {
  constructor(...args: AirdropperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _token: AddressLike,
    _merkleRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_token, _merkleRoot, overrides || {});
  }
  override deploy(
    _token: AddressLike,
    _merkleRoot: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_token, _merkleRoot, overrides || {}) as Promise<
      Airdropper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Airdropper__factory {
    return super.connect(runner) as Airdropper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AirdropperInterface {
    return new Interface(_abi) as AirdropperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Airdropper {
    return new Contract(address, _abi, runner) as unknown as Airdropper;
  }
}
